import unittest
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from vulnerabilities.vulnerability_analyzer import find_vulnerabilities

class TestVulnerabilityAnalyzer(unittest.TestCase):
    def test_sql_injection_detection(self):
        code = """
        query = "SELECT * FROM users WHERE id = " + user_input
        cursor.execute(query)
        """
        vulnerabilities = find_vulnerabilities(code)
        sql_vulnerabilities = [v for v in vulnerabilities if v['type'] == 'SQL Injection']
        self.assertTrue(len(sql_vulnerabilities) > 0)
    
    def test_xss_detection(self):
        code = """
        response.write("<div>" + user_input + "</div>")
        """
        vulnerabilities = find_vulnerabilities(code)
        xss_vulnerabilities = [v for v in vulnerabilities if v['type'] == 'Cross-Site Scripting (XSS)']
        self.assertTrue(len(xss_vulnerabilities) > 0)
    
    def test_command_injection_detection(self):
        code = """
        os.system("ls " + user_input)
        """
        vulnerabilities = find_vulnerabilities(code)
        cmd_vulnerabilities = [v for v in vulnerabilities if v['type'] == 'Command Injection']
        self.assertTrue(len(cmd_vulnerabilities) > 0)
    
    def test_no_vulnerabilities(self):
        code = """
        def add(a, b):
            return a + b
        """
        vulnerabilities = find_vulnerabilities(code)
        self.assertEqual(len(vulnerabilities), 0)

if __name__ == '__main__':
    unittest.main() 